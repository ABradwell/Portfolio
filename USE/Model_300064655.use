model SpartanSystem

-----------------------------------
-----------------------------------
--------- classes ------------
-----------------------------------
-----------------------------------

class Team
attributes
	name : String
	startingTime : Real
	overallTime : Real
	droppedOut : Boolean
operations
	makeCaptain(member : Member)
end


class Member
attributes
	firstName : String
	lastName : String
	address : String
	memberID : Integer
	physicalProblem : Boolean
	age : Integer
end


class Contact
attributes
	name : String
	address : String
	phone : String
	relationship : String
end


class Waiver
attributes
	signature : String
	signed : Boolean
end


class Captain < Member
attributes
operations
	changeName(name : String)
	addMemeber(member : Member)
	removeMember(member : Member)
end


class Leg
attributes
	startingLocation : String
	endingLocation : String
operations
	giveStartTime(team : Team)
end


class Skill
attributes
	type : String
end


class Penalty
attributes
	timeAdded : Real
end


class Race
attributes
	location : String
	maxTime : Real
	fastestTime : Real
end


class ParentalConsent < Waiver
attributes
	permissionGiven : Boolean
end



-----------------------------------
-----------------------------------
--------- Constraints ------------
-----------------------------------
-----------------------------------

constraints
context Team
	inv validName: self.onList -> forAll(current | current.firstName <> null)
context Race
	inv legCheck: self.leg -> size() >= 4 
context Leg
	inv skillQuantity: self.involved-> forAll(skill1, skill2 | skill1 <> skill2 implies skill1.type <> skill2.type)
context Race
	inv checkScore: self.isRacingIn -> forAll(current | current.overallTime <= maxTime)
context Member
	inv oneTeam: self.onListFor -> size() <=1
context Team
	inv checkiD: self.onList -> forAll(MEM1, MEM2 | MEM1 <> MEM2 implies MEM1.memberID <> MEM2.memberID)
context Race
	inv checkTeamNames: self.isRacingIn -> forAll(team1, team2 | team1 <> team2 implies team1.name <> team2.name)
context Team
	inv numbersActive: self.person -> size() <= 4
context Leg
	inv startTimes: self.team ->  forAll(start1, start2 | start1 <> start2 implies start1.startingTime <> start2.startingTime)


-----------------------------------
-----------------------------------
--------- Associations ------------
-----------------------------------
-----------------------------------

association inLeg between
	Leg [0..5]
	Team [*]
end

association ledBy between
	Captain [0..1] role leadingMember
	Team [1] role leading
end


association contains between
	Leg [4..5]
	Race [*] role assignedRace
end


association participates between
	Team [*] role isRacingIn
	Race [0..1] role races
end


association recruits between
	Member [1..*] role onList
	Team [1] role onListFor
end


association involves between
	Skill [*] role involved
	Leg [*] role involvedIn
end


association isAdeptAt between
	Team [*]
	Skill [*]
end


association hasEarned between
	Team [*] role infractor
	Penalty [*] role infraction
end


association hasSigned between
	Waiver [0..1]
	Member [0..1]
end


association trusts between
	Contact [0..1]
	Member [0..1]
end


association hasApprovalFrom between
	ParentalConsent [0..1] role parent
	Member [0..1] role participant
end


association isUsing between
	Team [1] role racesFor
	Member [0..4] role person
end







